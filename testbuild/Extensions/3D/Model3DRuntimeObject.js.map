{
  "version": 3,
  "sources": ["../../../../../../../Extensions/3D/Model3DRuntimeObject.ts"],
  "sourcesContent": ["namespace gdjs {\n  type Model3DAnimation = { name: string; source: string; loop: boolean };\n\n  /** Base parameters for {@link gdjs.Cube3DRuntimeObject} */\n  export interface Model3DObjectData extends Object3DData {\n    /** The base parameters of the Model3D object */\n    content: Object3DDataContent & {\n      modelResourceName: string;\n      rotationX: number;\n      rotationY: number;\n      rotationZ: number;\n      keepAspectRatio: boolean;\n      materialType: 'Basic' | 'StandardWithoutMetalness' | 'KeepOriginal';\n      originLocation:\n        | 'ModelOrigin'\n        | 'ObjectCenter'\n        | 'BottomCenterZ'\n        | 'BottomCenterY'\n        | 'TopLeft';\n      centerLocation:\n        | 'ModelOrigin'\n        | 'ObjectCenter'\n        | 'BottomCenterZ'\n        | 'BottomCenterY';\n      animations: Model3DAnimation[];\n    };\n  }\n\n  type FloatPoint3D = [float, float, float];\n\n  const getPointForLocation = (location: string): FloatPoint3D | null => {\n    switch (location) {\n      case 'ModelOrigin':\n        return null;\n      case 'ObjectCenter':\n        return [0.5, 0.5, 0.5];\n      case 'BottomCenterZ':\n        return [0.5, 0.5, 0];\n      case 'BottomCenterY':\n        return [0.5, 1, 0.5];\n      case 'TopLeft':\n        return [0, 0, 0];\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * A 3D object which displays a 3D model.\n   */\n  export class Model3DRuntimeObject\n    extends gdjs.RuntimeObject3D\n    implements gdjs.Animatable {\n    _renderer: gdjs.Model3DRuntimeObjectRenderer;\n\n    _modelResourceName: string;\n    _materialType: gdjs.Model3DRuntimeObject.MaterialType =\n      gdjs.Model3DRuntimeObject.MaterialType.Basic;\n\n    /**\n     * The local point of the model that will be at the object position.\n     *\n     * Coordinates are between 0 and 1.\n     *\n     * Its value is `null` when the point is configured to `\"ModelOrigin\"`\n     * because the model origin needs to be evaluated according to the object\n     * configuration.\n     * @see gdjs.Model3DRuntimeObject3DRenderer.getOriginPoint\n     */\n    _originPoint: FloatPoint3D | null;\n    /**\n     * The local point of the model that is used as rotation center.\n     *\n     * Coordinates are between 0 and 1.\n     *\n     * Its value is `null` when the point is configured to `\"ModelOrigin\"`\n     * because the model origin needs to be evaluated according to the object\n     * configuration.\n     * @see gdjs.Model3DRuntimeObject3DRenderer.getCenterPoint\n     */\n    _centerPoint: FloatPoint3D | null;\n\n    _animations: Model3DAnimation[];\n    _currentAnimationIndex: integer = 0;\n    _animationSpeedScale: float = 1;\n    _animationPaused: boolean = false;\n\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      objectData: Model3DObjectData\n    ) {\n      super(instanceContainer, objectData);\n      this._modelResourceName = objectData.content.modelResourceName;\n      this._animations = objectData.content.animations;\n      this._originPoint = getPointForLocation(\n        objectData.content.originLocation\n      );\n      this._centerPoint = getPointForLocation(\n        objectData.content.centerLocation\n      );\n      this._renderer = new gdjs.Model3DRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n      this._materialType = this._convertMaterialType(\n        objectData.content.materialType\n      );\n      this._updateModel(objectData);\n      if (this._animations.length > 0) {\n        this._renderer.playAnimation(\n          this._animations[0].source,\n          this._animations[0].loop\n        );\n      }\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    updateFromObjectData(\n      oldObjectData: Model3DObjectData,\n      newObjectData: Model3DObjectData\n    ): boolean {\n      super.updateFromObjectData(oldObjectData, newObjectData);\n      if (\n        oldObjectData.content.width !== newObjectData.content.width ||\n        oldObjectData.content.height !== newObjectData.content.height ||\n        oldObjectData.content.depth !== newObjectData.content.depth ||\n        oldObjectData.content.rotationX !== newObjectData.content.rotationX ||\n        oldObjectData.content.rotationY !== newObjectData.content.rotationY ||\n        oldObjectData.content.rotationZ !== newObjectData.content.rotationZ ||\n        oldObjectData.content.keepAspectRatio !==\n          newObjectData.content.keepAspectRatio\n      ) {\n        this._updateModel(newObjectData);\n      }\n      if (\n        oldObjectData.content.materialType !==\n        newObjectData.content.materialType\n      ) {\n        this._materialType = this._convertMaterialType(\n          newObjectData.content.materialType\n        );\n        this._updateModel(newObjectData);\n      }\n      if (\n        oldObjectData.content.originLocation !==\n        newObjectData.content.originLocation\n      ) {\n        this._originPoint = getPointForLocation(\n          newObjectData.content.originLocation\n        );\n      }\n      if (\n        oldObjectData.content.centerLocation !==\n        newObjectData.content.centerLocation\n      ) {\n        this._centerPoint = getPointForLocation(\n          newObjectData.content.centerLocation\n        );\n      }\n      return true;\n    }\n\n    _updateModel(objectData: Model3DObjectData) {\n      const rotationX = objectData.content.rotationX || 0;\n      const rotationY = objectData.content.rotationY || 0;\n      const rotationZ = objectData.content.rotationZ || 0;\n      const keepAspectRatio = objectData.content.keepAspectRatio;\n      this._renderer._updateModel(\n        rotationX,\n        rotationY,\n        rotationZ,\n        this._getOriginalWidth(),\n        this._getOriginalHeight(),\n        this._getOriginalDepth(),\n        keepAspectRatio\n      );\n    }\n\n    getRenderer(): RuntimeObject3DRenderer {\n      return this._renderer;\n    }\n\n    _convertMaterialType(\n      materialTypeString: string\n    ): gdjs.Model3DRuntimeObject.MaterialType {\n      if (materialTypeString === 'KeepOriginal') {\n        return gdjs.Model3DRuntimeObject.MaterialType.KeepOriginal;\n      } else if (materialTypeString === 'StandardWithoutMetalness') {\n        return gdjs.Model3DRuntimeObject.MaterialType.StandardWithoutMetalness;\n      } else {\n        return gdjs.Model3DRuntimeObject.MaterialType.Basic;\n      }\n    }\n\n    update(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      const elapsedTime = this.getElapsedTime() / 1000;\n      this._renderer.updateAnimation(elapsedTime * this._animationSpeedScale);\n    }\n\n    /**\n     * Get the index of the animation being played.\n     * @return The index of the new animation being played\n     */\n    getAnimationIndex(): number {\n      return this._currentAnimationIndex;\n    }\n\n    /**\n     * Change the animation being played.\n     * @param animationIndex The index of the new animation to be played\n     */\n    setAnimationIndex(animationIndex: number): void {\n      animationIndex = animationIndex | 0;\n      if (\n        animationIndex < this._animations.length &&\n        this._currentAnimationIndex !== animationIndex &&\n        animationIndex >= 0\n      ) {\n        const animation = this._animations[animationIndex];\n        this._currentAnimationIndex = animationIndex;\n        this._renderer.playAnimation(animation.source, animation.loop);\n      }\n    }\n\n    /**\n     * Get the name of the animation being played.\n     * @return The name of the new animation being played\n     */\n    getAnimationName(): string {\n      if (this._currentAnimationIndex >= this._animations.length) {\n        return '';\n      }\n      return this._animations[this._currentAnimationIndex].name;\n    }\n\n    /**\n     * Change the animation being played.\n     * @param newAnimationName The name of the new animation to be played\n     */\n    setAnimationName(newAnimationName: string): void {\n      if (!newAnimationName) {\n        return;\n      }\n      const animationIndex = this._animations.findIndex(\n        (animation) => animation.name === newAnimationName\n      );\n      if (animationIndex >= 0) {\n        this.setAnimationIndex(animationIndex);\n      }\n    }\n\n    isCurrentAnimationName(name: string): boolean {\n      return this.getAnimationName() === name;\n    }\n\n    /**\n     * Return true if animation has ended.\n     * The animation had ended if:\n     * - it's not configured as a loop;\n     * - the current frame is the last frame;\n     * - the last frame has been displayed long enough.\n     */\n    hasAnimationEnded(): boolean {\n      return this._renderer.hasAnimationEnded();\n    }\n\n    isAnimationPaused() {\n      return this._animationPaused;\n    }\n\n    pauseAnimation() {\n      this._animationPaused = true;\n      return this._renderer.pauseAnimation();\n    }\n\n    resumeAnimation() {\n      this._animationPaused = false;\n      return this._renderer.resumeAnimation();\n    }\n\n    getAnimationSpeedScale() {\n      return this._animationSpeedScale;\n    }\n\n    setAnimationSpeedScale(ratio: float): void {\n      this._animationSpeedScale = ratio;\n    }\n\n    getCenterX(): float {\n      const centerPoint = this._renderer.getCenterPoint();\n      return this.getWidth() * centerPoint[0];\n    }\n\n    getCenterY(): float {\n      const centerPoint = this._renderer.getCenterPoint();\n      return this.getHeight() * centerPoint[1];\n    }\n\n    getDrawableX(): float {\n      const originPoint = this._renderer.getOriginPoint();\n      return this.getX() - this.getWidth() * originPoint[0];\n    }\n\n    getDrawableY(): float {\n      const originPoint = this._renderer.getOriginPoint();\n      return this.getY() - this.getHeight() * originPoint[1];\n    }\n  }\n\n  export namespace Model3DRuntimeObject {\n    export enum MaterialType {\n      Basic,\n      StandardWithoutMetalness,\n      KeepOriginal,\n    }\n  }\n  gdjs.registerObject('Scene3D::Model3DObject', gdjs.Model3DRuntimeObject);\n}\n"],
  "mappings": "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",
  "names": []
}
